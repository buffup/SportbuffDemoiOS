// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SportBuff
import AVFoundation
import CoreMedia
import Foundation
import Network
import QuartzCore
@_exported import SportBuff
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import os.log
import os
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BuffView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var layerZPosition: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static var keyboardFromTextFieldOffset: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var startStreamListener: ((Swift.Result<SportBuff.WebSocketServiceConnectionStatus, Swift.Error>) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public func startStream(streamId: Swift.String?, providerId: Swift.String?, listenerCallbackQueue: Dispatch.DispatchQueue = .main)
  @_Concurrency.MainActor(unsafe) public func provideVOD(playbackTime time: CoreMedia.CMTime)
  @_Concurrency.MainActor(unsafe) public func provideSync(timeStamp: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func displayMenu()
  @_Concurrency.MainActor(unsafe) public func hideMenu()
}
@_hasMissingDesignatedInitializers final public class SportBuff {
  public static func initialize(clientAccount name: Swift.String, anonymousLogin: Swift.Bool = false)
  public static func deinitialize()
  public static func signInUser(token: Swift.String, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public static func setBuffSoundVolume(level: Swift.Float)
  @objc deinit
}
public enum SDKError : Swift.Error, Swift.Equatable {
  case sdkNotInitialized
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SportBuff.SDKError, b: SportBuff.SDKError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum WebSocketServiceConnectionStatus {
  case connecting
  case connected
  case reconnecting
  case disconnected
  case disconnectedUnexpectedly
  case vodStarted
  case failed(error: Swift.Error)
}
public enum StartStreamError : Swift.Error, Swift.Equatable {
  case noStartValueProvided
  case noStreamFound
  case noStreamConfigFound
  case connectionToServiceFailed
  case general(description: Swift.String)
  public static func == (a: SportBuff.StartStreamError, b: SportBuff.StartStreamError) -> Swift.Bool
}
extension SportBuff.SDKError : Swift.Hashable {}
